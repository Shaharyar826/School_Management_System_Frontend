import localtunnel from 'localtunnel';
import chalk from 'chalk';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory name
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const subdomain = 'schoollms'; // Your preferred subdomain
const port = 5173; // Vite's default port
const maxRetries = 5;
let retryCount = 0;

// Create a simple HTML page that will redirect to the tunnel URL
function createRedirectPage(url) {
  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
  <title>Redirecting to your app...</title>
  <meta http-equiv="refresh" content="0;URL='${url}'" />
  <style>
    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
    .loader { border: 5px solid #f3f3f3; border-top: 5px solid #3498db; border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite; margin: 20px auto; }
    @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
  </style>
</head>
<body>
  <h1>Redirecting to your app...</h1>
  <div class="loader"></div>
  <p>If you are not redirected automatically, <a href="${url}">click here</a>.</p>
  <p><small>Note: This page is automatically generated by localtunnel.js</small></p>
</body>
</html>
  `;

  fs.writeFileSync(path.join(__dirname, 'tunnel-redirect.html'), htmlContent);
  return path.join(__dirname, 'tunnel-redirect.html');
}

// Create a shareable HTML page with the tunnel URL
function createShareablePage(url) {
  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
  <title>Your Shareable Link</title>
  <style>
    body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
    .url-box { background: #f0f0f0; padding: 15px; border-radius: 5px; margin: 20px 0; }
    .url { font-size: 18px; word-break: break-all; color: #0066cc; }
    .copy-btn { background: #4CAF50; color: white; border: none; padding: 10px 15px;
               border-radius: 4px; cursor: pointer; margin-top: 10px; }
    .copy-btn:hover { background: #45a049; }
    h1 { color: #333; }
    .note { background: #fff3cd; padding: 10px; border-left: 4px solid #ffc107; margin: 20px 0; }
  </style>
</head>
<body>
  <h1>Your Website Shareable Link</h1>
  <p>Share this link with your friends to let them see your website:</p>
  <div class="url-box">
    <div class="url" id="url">${url}</div>
    <button class="copy-btn" onclick="copyUrl()">Copy Link</button>
  </div>
  <div class="note">
    <p><strong>Important:</strong> This link will only work while your localtunnel is running.</p>
    <p>If your friends see WebSocket errors, tell them to ignore those - the site will still work!</p>
  </div>
  <script>
    function copyUrl() {
      const urlText = document.getElementById('url').innerText;
      navigator.clipboard.writeText(urlText)
        .then(() => alert('Link copied to clipboard!'))
        .catch(err => console.error('Error copying text: ', err));
    }
  </script>
</body>
</html>
  `;

  fs.writeFileSync(path.join(__dirname, 'share-link.html'), htmlContent);
  return path.join(__dirname, 'share-link.html');
}

async function startTunnel() {
  console.log(chalk.blue('Starting localtunnel...'));

  try {
    // More reliable options
    const tunnel = await localtunnel({
      port,
      subdomain,
      local_host: 'localhost', // Explicitly set local host
      allow_invalid_cert: true, // Allow invalid certificates
    });

    console.log(chalk.green('âœ“ Localtunnel is running!'));
    console.log(chalk.yellow(`URL: ${tunnel.url}`));

    // Extract domain for Vite configuration
    const domain = new URL(tunnel.url).hostname;
    console.log(chalk.blue(`Localtunnel domain: ${domain}`));

    // Create redirect and shareable pages
    const redirectPath = createRedirectPage(tunnel.url);
    const shareablePath = createShareablePage(tunnel.url);

    console.log(chalk.cyan('You can access your app from anywhere using this URL'));
    console.log(chalk.cyan('SHARE THIS URL WITH YOUR FRIENDS: ') + chalk.bold.yellow(tunnel.url));
    console.log(chalk.magenta('A shareable HTML file has been created at: ') + chalk.bold('frontend/share-link.html'));
    console.log(chalk.gray('Press Ctrl+C to stop the tunnel'));

    // Log connection info for debugging
    console.log(chalk.blue('Connection Info:'));
    console.log(chalk.blue(`- Local Port: ${port}`));
    console.log(chalk.blue(`- Tunnel URL: ${tunnel.url}`));

    // Handle tunnel events
    tunnel.on('close', () => {
      console.log(chalk.red('Localtunnel is closed'));

      // Try to restart if closed unexpectedly
      if (retryCount < maxRetries) {
        retryCount++;
        console.log(chalk.yellow(`Attempting to reconnect (${retryCount}/${maxRetries})...`));
        setTimeout(startTunnel, 2000);
      } else {
        console.log(chalk.red('Max retries reached. Exiting.'));
        process.exit(1);
      }
    });

    tunnel.on('error', (err) => {
      console.error(chalk.red('Localtunnel error:'), err);

      // Try to restart on error
      if (retryCount < maxRetries) {
        retryCount++;
        console.log(chalk.yellow(`Attempting to reconnect (${retryCount}/${maxRetries})...`));
        setTimeout(startTunnel, 2000);
      } else {
        console.log(chalk.red('Max retries reached. Exiting.'));
        process.exit(1);
      }
    });

  } catch (error) {
    console.error(chalk.red('Failed to start localtunnel:'), error);

    // Try to restart on error
    if (retryCount < maxRetries) {
      retryCount++;
      console.log(chalk.yellow(`Attempting to reconnect (${retryCount}/${maxRetries})...`));
      setTimeout(startTunnel, 2000);
    } else {
      console.log(chalk.red('Max retries reached. Exiting.'));
      process.exit(1);
    }
  }
}

startTunnel();
